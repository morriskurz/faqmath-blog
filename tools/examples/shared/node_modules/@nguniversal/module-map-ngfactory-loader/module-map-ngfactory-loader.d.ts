
import { Compiler } from '@angular/core';
import { InjectionToken } from '@angular/core';
import { ModuleWithProviders } from '@angular/core';
import { NgModuleFactory } from '@angular/core';
import { NgModuleFactoryLoader } from '@angular/core';
import { StaticProvider } from '@angular/core';
import { Type } from '@angular/core';

/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 */
export declare const MODULE_MAP: InjectionToken<ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a>;

/**
 * Module for using a NgModuleFactoryLoader which does not lazy load
 */
export declare class ModuleMapLoaderModule {
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param moduleMap Map to use as a value for MODULE_MAP
     */
    static withMap(moduleMap: ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a): ModuleWithProviders;
}

/**
 * NgModuleFactoryLoader which does not lazy load
 */
export declare class ModuleMapNgFactoryLoader implements NgModuleFactoryLoader {
    private compiler;
    private moduleMap;
    constructor(compiler: Compiler, moduleMap: ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a);
    load(loadChildrenString: string): Promise<NgModuleFactory<any>>;
    private loadFactory;
    private loadAndCompile;
}

/**
 * Helper function for getting the providers object for the MODULE_MAP
 *
 * @param moduleMap Map to use as a value for MODULE_MAP
 */
export declare function provideModuleMap(moduleMap: ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a): StaticProvider;

export declare type ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a = {
    [key: string]: Type<any> | NgModuleFactory<any>;
};

export { }
